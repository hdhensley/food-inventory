plugins {
	id 'org.springframework.boot' version '2.7.13-SNAPSHOT'
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
	id 'java'
}

group = 'com.overzealouspelican'
version = '2.2.0'
sourceCompatibility = JavaVersion.VERSION_21
targetCompatibility = JavaVersion.VERSION_21

repositories {
	mavenLocal()
	mavenCentral()
	maven { url 'https://repo.spring.io/milestone' }
	maven { url 'https://repo.spring.io/snapshot' }
}

configurations {
	developmentOnly
	runtimeClasspath {
		extendsFrom developmentOnly
	}
}

jar {
	archiveFileName='app.jar'
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	developmentOnly("org.springframework.boot:spring-boot-devtools")
	implementation 'org.springframework.security:spring-security-test'
	implementation 'org.springframework.boot:spring-boot-starter-validation:2.4.13'

	runtimeOnly 'com.mysql:mysql-connector-j:8.0.33'
	runtimeOnly 'com.h2database:h2'
	// LOMBOK
	compileOnly 'org.projectlombok:lombok:1.18.30'
	annotationProcessor 'org.projectlombok:lombok:1.18.30'

	testImplementation 'org.junit.jupiter:junit-jupiter:5.10.0'

	testImplementation 'net.bytebuddy:byte-buddy:1.14.7'

	testImplementation("org.mockito:mockito-core:5.17.0")
    testImplementation 'org.mockito:mockito-junit-jupiter:5.17.0'
	
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	
	testCompileOnly 'org.projectlombok:lombok:1.18.30'
	testAnnotationProcessor 'org.projectlombok:lombok:1.18.30'
}

tasks.named('test') {
	useJUnitPlatform()
}

// Run the frontend with hot reloading on http://localhost:4200
tasks.register('devFrontend', Exec) {
	commandLine 'sh', '-c', 'cd ./src/main/frontend/ng-food-inventory && npm run start'
}

// Run the docker image, available at localhost:8080
tasks.register('dockerRun', Exec) {
	commandLine 'sh', '-c', 'docker run --name food-inventory -d -v inventory-volume:/opt/db -p 8080:8080 dhensley/food-inventory'
}

// Build the angular application and copy the dist contents into the spring boot static directory
tasks.register('buildFrontend', Exec) {
	commandLine 'sh', '-c', 'rm ./src/main/resources/static/*'
	commandLine 'sh', '-c', 'cd ./src/main/frontend/ng-food-inventory && npm i && npm run build --aot && cp -r dist/ng-food-inventory/* ../../resources/static/'
}

// bootJar.dependsOn buildFrontend

// Build a docker image for the full application
tasks.register('dockerBuild', Exec) {
	clean
	commandLine 'sh', '-c', 'docker build -t dhensley/food-inventory .'
}

dockerBuild.dependsOn bootJar

// Tag the docker image with :latest
tasks.register('dockerTag', Exec) {
	commandLine 'sh', '-c', 'docker tag dhensley/food-inventory:latest food-inventory:latest'
}

dockerTag.dependsOn dockerBuild

// Deploy the docker image
tasks.register('dockerDeploy', Exec) {
	commandLine 'sh', '-c', 'docker push dhensley/food-inventory:latest'
}

dockerDeploy.dependsOn dockerTag
